# Expires map
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   max;
    application/javascript     max;
    ~image/                    max;
    font/woff2                 max;
}

# https://www.bjornjohansen.no/exclude-requests-from-nginx-access-log
# Exclude specific user agents in logging requests from certain bots/crawlers, or you have a monitoring service, like Pingdom.
map $http_user_agent $log_ua {
    ~UptimeRobot 0;
    ~Pingdom 0;

    default 1;
}

server {
    listen 80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    client_max_body_size 1G;
    charset utf-8;

    # Docker DNS
    resolver 127.0.0.11 ipv6=off valid=2s;
    set $backend oha-app-prod-web;

    # set the correct host(s) for your site
    server_name ohaoha.ru
                *.ohaoha.ru;

    # acme auto issue
    ssl_certificate /etc/nginx/ssl/ohaoha/fullchain_cert.pem;
    ssl_certificate_key /etc/nginx/ssl/ohaoha/ohaoha.ru_key.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # intermediate configuration.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # not be displayed inside a <frame>, an <iframe> or an <object>
    add_header X-Frame-Options DENY;

    # weak Diffie-Hellman keys - new 4096
    # ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    # https://www.digitalocean.com/community/tutorials/how-to-implement-browser-caching-with-nginx-s-header-module-on-ubuntu-16-04
    expires $expires;

    keepalive_timeout 5;

    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 2;
    gzip_min_length 1000;
    gzip_http_version 1.1;
    gzip_disable "MSIE [1-6].(?!.*SV1)";
    gzip_types text/javascript text/css text/plain application/json application/x-javascript text/xml application/xml application/xml+rss  application/javascript;

    root /etc/nginx/www/ohaoha.ru/dist;
    index index.html;

    location /static {
        gzip_static on;
        access_log off;
        alias /usr/share/nginx/ohaoha/static;
    }

    location /media {
        gzip_static on;
        access_log off;
        alias /usr/share/nginx/ohaoha/media;
    }

    location /agreement.txt {
        alias /etc/nginx/www/ohaoha.ru/agreement.txt;
    }

    location /policy.txt {
        alias /etc/nginx/www/ohaoha.ru/policy.txt;
    }

    location /robots.txt {
        alias /etc/nginx/www/ohaoha.ru/robots.txt;
    }

    location /yandex_5465a32ca7eb43cb.html {
        alias /etc/nginx/www/ohaoha.ru/yandex_5465a32ca7eb43cb.html;
    }

    location /back-manager/docs {
        alias /usr/share/nginx/ohaoha/docs;
        access_log /var/log/nginx/access.log main if=$log_ua;

        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/basic-auth/.htpasswd;
	}

    location /back-manager/ {
		if (-f /etc/nginx/maintenance/ohaoha.file) {
           return 503;
        }
        proxy_pass http://$backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_intercept_errors on;

        access_log /var/log/nginx/access.log main if=$log_ua;

        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/basic-auth/.htpasswd;
	}

    location /api/v1/docs {
        proxy_pass http://$backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_intercept_errors on;

        access_log /var/log/nginx/access.log main if=$log_ua;

        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/basic-auth/.htpasswd;
	}

    location /api {
		if (-f /etc/nginx/maintenance/ohaoha.file) {
           return 503;
        }
        proxy_pass http://$backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_intercept_errors off;

        access_log /var/log/nginx/access.log main if=$log_ua;
	}

    location /billing {
		if (-f /etc/nginx/maintenance/ohaoha.file) {
           return 503;
        }
        proxy_pass http://$backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_intercept_errors off;

        access_log /var/log/nginx/access.log main if=$log_ua;
	}

    error_page 400 /error/400.html;
    error_page 403 /error/403.html;
    error_page 404 /error/404.html;
    error_page 500 /error/500.html;
    error_page 502 /error/502.html;
    error_page 503 /error/503.html;
    error_page 504 /error/504.html;
    location ^~ /error/ {
        alias /usr/share/nginx/ohaoha.ru/error/;
        internal;
        allow all;
        auth_basic off;
    }
    location /error/css/ {
        alias /usr/share/nginx/ohaoha.ru/error/css/;
        allow all;
        access_log off;
    }
    location /error/img/ {
        alias /usr/share/nginx/ohaoha.ru/error/img/;
        allow all;
        access_log off;
    }

    # force https-redirects
    if ($scheme = http) {
        return 301 https://$server_name$request_uri;
    }

    location / {
        try_files $uri $uri/ /index.html;

        # auth_basic "Restricted Content";
        # auth_basic_user_file /etc/nginx/basic-auth/.htpasswd;
    }
  }
