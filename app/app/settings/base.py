"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import os
import sys
from builtins import int

from environs import Env
from kombu import Exchange
from kombu import Queue

env = Env()
env.read_env()

from django.contrib import messages
from django.utils.translation import gettext_lazy as _

sys.path.insert(0, '../../..')

from version import VERSION as changelog_version
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
TEMP_DIR = os.path.join(PROJECT_ROOT, 'tmp')
DATA_DIR = os.path.join(PROJECT_ROOT, 'data')

STARTUP_DAY = datetime.datetime(2019, 8, 8)
VERSION = changelog_version

TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'
DEBUG = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9i4zbqysz4=u#x3mi)b9*k(%ry#ccm9&lr1evrq%irgvrot_q%'

ENVIRONMENT = os.environ.get('APP_ENVIRONMENT', 'unknown')

DEFAULT_DOMAIN = os.environ.get('DJANGO_DOMAIN', 'localhost:8000')

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'ohaoha.ru',
    'api.ohaoha.ru',
    DEFAULT_DOMAIN,
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
    'django_extensions',
    'django_celery_results',
    'django_celery_beat',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.vk',
    'api',
    'core',
    'billing',
    'rest_framework',
    'corsheaders',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'core.middleware.EasyTimezoneMiddleware',
    'core.middleware.SetLastVisitMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_ROOT, 'tools', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.utils.context_processors.analytics_settings',

            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_PORT = int(os.environ.get('DB_PORT') or '5432')
DB_NAME = os.environ.get('DB_NAME', 'ohaoha')
DB_USER = os.environ.get('DB_USER', 'dev')
DB_PASSWORD = os.environ.get('DB_PASSWORD', 'dev')


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    },
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

TIME_ZONE = 'Europe/Moscow'
# TIME_ZONE = 'Asia/Yekaterinburg'

# https://docs.djangoproject.com/en/2.2/ref/settings/#languages
LANGUAGES = [
    ('en', _('English')),
    ('ru', _('Russian')),
    ('de', _('German')),
]

# https://docs.djangoproject.com/en/2.2/ref/settings/#language-code
# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru-ru'

# Internationalization
# https://docs.djangoproject.com/en/1.10/ref/settings/#locale-paths
# https://docs.djangoproject.com/en/1.10/topics/i18n/translation/#how-django-discovers-translations
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

USE_I18N = True

USE_L10N = True

USE_TZ = True

DECIMAL_SEPARATOR = '.'
USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = ' '
NUMBER_GROUPING = 3


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'theme'),
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# MEDIA CONFIGURATION
MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'media')

MEDIA_URL = 'media/'

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

SOCIALACCOUNT_PROVIDERS = {
    'facebook': {
        'METHOD': 'oauth2',
        'SDK_URL': '//connect.facebook.net/{locale}/sdk.js',
        'SCOPE': ['email', 'public_profile', 'user_birthday', 'user_hometown'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'verified',
            'locale',
            'timezone',
            'link',
            'gender',
            'updated_time',
        ],
        'EXCHANGE_TOKEN': True,
        'VERIFIED_EMAIL': False,
        'VERSION': 'v2.12',
    },
}

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_EMAIL_VERIFICATION = 'none'
#  ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
LOGIN_REDIRECT_URL = env.str('LOGIN_REDIRECT_URL', '/')

AMPLITUDE_API_KEY = '6482f2636e131476313139ce45499528'  # Dev

# GEO IP DATABASE
# fork https://github.com/Miserlou/django-easy-timezones
# https://www.miyuru.lk/geoiplegacy
GEOIP_DATABASE = os.path.join(PROJECT_ROOT, 'data/GeoLiteCity.dat')

LAST_VISIT_ACCURACY = 2  # in hours

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '2/second',
        'user': '100/second',
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
}

# RabbitMQ
RABBIT = {
    'host': env.str('OHA_RABBITMQ_HOST', '127.0.0.1'),
    'port': env.int('OHA_RABBITMQ_PORT', 5672),
    'login': env.str('OHA_RABBITMQ_LOGIN', 'rabbit'),
    'password': env.str('OHA_RABBITMQ_PASSWORD', 'rabbit'),
    'vhost': env.str('OHA_RABBITMQ_VHOST', 'ohaoha'),
}
CELERY_BROKER_URL = 'amqp://{login}:{password}@{host}:{port}/{vhost}'.format_map(RABBIT)
CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_DEFAULT_QUEUE = 'low_priority'
CELERY_TASK_QUEUES = (
    Queue('low_priority', Exchange('low_priority'), routing_key='low_priority'),
    Queue('high_priority', Exchange('high_priority'), routing_key='high_priority'),
)
CELERY_TASK_DEFAULT_EXCHANGE = 'low_priority'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'low_priority'
CELERY_TASK_ROUTES = {
    'app.core.tasks.*': {'routing_key': 'low_priority', 'queue': 'low_priority'},
    'celery.*': {'routing_key': 'low_priority', 'queue': 'low_priority'},
}
# Важно! Без этой опции не будет работать помещение упавших задач в DLX
# True - ACK только после выполнения задачи, False - сразу при получении
# http://docs.celeryproject.org/en/latest/userguide/tasks.html#reject
# http://docs.celeryproject.org/en/latest/faq.html#should-i-use-retry-or-acks-late
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_CONCURRENCY = env.int('OHA_CELERY_WORKER_CONCURRENCY', 4)
CELERY_TASK_RESULT_EXPIRES = 60 * 30

# allauth
VK_OAUTH_ID = env.str('VK_OAUTH_ID', '7172889')
VK_OAUTH_SECRET = env.str('VK_OAUTH_SECRET', 'FMLcuJ6Y7lVfRo2lKgnc')

# Unit economic settings
# Лимит при обходе в бесплатном альбоме по числу фотографий, для выбора лучшего фото с результатами
FREE_SEARCH_LIMIT = env.int('FREE_SEARCH_LIMIT', 50)
# Лимит расходов в рублях на одно фото
FREE_SPEND_LIMIT = env.int('FREE_SPEND_LIMIT', 1)
# Лимит расходов в рублях на одно фото
PAID_SPEND_LIMIT = env.int('PAID_SPEND_LIMIT', 5)
# Курс доллара к рублю
USD_RUB_EXCHANGE_RATE = env.int('USD_RUB_EXCHANGE_RATE', 75)
# Число запусков за 28 дней
MAX_RUN_IN_PERIOD = env.int('USD_RUB_EXCHANGE_RATE', 2)

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

# Image similarity
SIMILARITY_API_ENDPOINT = env.str('SIMILARITY_API_ENDPOINT', 'http://localhost:8888')

# Yandex money
YM_WALLET = env.str('YM_WALLET', '4100111458166191')  # 4100111458166191 (vitaly.poysh)
YM_SECRET = env.str('YM_SECRET', 'bu___q___G___K___E___vy2')

# TinEye
TINEYE_PRIVATE_KEY = env.str('TINEYE_PRIVATE_KEY', '6mm60lsCNIB,FwOWjJqA80QZHh9BMwc-ber4u=t^')
TINEYE_PUBLIC_KEY = env.str('TINEYE_PUBLIC_KEY', 'LCkn,2K7osVwkX95K4Oy')
